import React, { useEffect, useState } from 'react';
import { useParams, useSearchParams, Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import Navbar from '@/components/layout/Navbar';
// QuizCard is removed as quizzes are generated on the next page
// import QuizCard from '@/components/quiz/QuizCard';
import AnimatedCard from '@/components/ui/AnimatedCard';
import { quizCategories } from '@/utils/quizData';
import { AlertTriangle, Loader2 } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button'; // Import Button
import DifficultySelector from '@/components/categories/DifficultySelector'; // Import DifficultySelector
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"; // Import Dialog components

// Array of industries for consistency (moved here for use in this component)
const industries = [
  { value: 'tech', label: 'Technology' },
  { value: 'healthcare', label: 'Healthcare' },
  { value: 'finance', label: 'Finance' },
  { value: 'education', label: 'Education' },
  { value: 'retail', label: 'Retail' },
  { value: 'manufacturing', label: 'Manufacturing' },
  { value: 'any', label: 'Any Industry' }
];

const CategoryPage = () => {
  const { categoryId } = useParams<{ categoryId: string }>();
  const [searchParams] = useSearchParams();
  const difficulty = searchParams.get('difficulty') || 'normal';
  const industry = searchParams.get('industry') || 'any';
  const [isSelectorOpen, setIsSelectorOpen] = useState(false);

  const category = quizCategories.find(cat => cat.id === categoryId);

  // No longer simulating loading/generation here
  // const [isLoading, setIsLoading] = useState(true);
  // const [isGenerating, setIsGenerating] = useState(false);

  // useEffect(() => {
  //   // Simulate loading state
  //   const timer = setTimeout(() => setIsLoading(false), 500);
  //   return () => clearTimeout(timer);
  // }, []);

  if (!category) {
    return (
      <div className="min-h-screen bg-background">
        <Navbar />
        <div className="container max-w-7xl mx-auto px-6 pt-32 pb-20">
          <div className="text-center">
            <h1 className="text-3xl font-bold mb-4">Category Not Found</h1>
            <p className="text-muted-foreground mb-6">The category you're looking for doesn't exist.</p>
            <Link to="/" className="neo-button">
              Back to Home
            </Link>
          </div>
        </div>
      </div>
    );
  }

  const difficultyLabel = {
    'easy': 'Easy',
    'normal': 'Normal',
    'hard': 'Hard'
  }[difficulty] || 'Normal';

  const industryLabel = industries.find(i => i.value === industry)?.label || 'Any Industry';

  return (
    <div className="min-h-screen bg-background">
      <Navbar />
      <div className="container max-w-7xl mx-auto px-6 pt-32 pb-20">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-12 text-center"
        >
          <div className="text-5xl mb-4">{category.icon}</div>
          <h1 className="text-3xl md:text-4xl font-bold mb-4">{category.title}</h1>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto mb-4">{category.description}</p>

          {/* Display selected filters */}
          <div className="flex flex-wrap justify-center gap-2 mb-6">
            <span className="bg-accent/10 text-accent px-3 py-1 rounded-full text-sm font-medium">
              {difficultyLabel} Difficulty
            </span>
            {industry !== 'any' && (
              <span className="bg-secondary text-secondary-foreground px-3 py-1 rounded-full text-sm font-medium">
                {industryLabel}
              </span>
            )}
          </div>

          {/* Button to open Difficulty Selector */}
          <Dialog open={isSelectorOpen} onOpenChange={setIsSelectorOpen}>
            <DialogTrigger asChild>
              <Button className="neo-button">
                Configure & Start Quiz
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Configure Quiz: {category.title}</DialogTitle>
                <DialogDescription>
                  Select difficulty and industry focus. Questions will be generated by solveUXQ AI.
                </DialogDescription>
              </DialogHeader>
              <DifficultySelector category={category} onClose={() => setIsSelectorOpen(false)} />
            </DialogContent>
          </Dialog>

          <div className="mt-8">
            <div className="bg-card border rounded-lg p-3 text-sm text-muted-foreground flex items-center max-w-md mx-auto">
              <AlertTriangle className="h-4 w-4 mr-2 flex-shrink-0 text-yellow-500" />
              Note: Quizzes are generated dynamically using solveUXQ AI based on your selections.
            </div>
          </div>
        </motion.div>

        {/* Removed the grid displaying predefined quizzes */}
        {/* 
        {!isLoading && (
          <div>
            {category.quizzes.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {category.quizzes.map((quiz, index) => (
                  <QuizCard key={quiz.id} quiz={quiz} index={index} />
                ))}
              </div>
            ) : (
              <AnimatedCard className="p-8 text-center">
                <p className="text-muted-foreground mb-4">No quizzes are available in this category yet.</p>
                <Link to="/" className="neo-button">
                  Explore Other Categories
                </Link>
              </AnimatedCard>
            )}
          </div>
        )} 
        */}
      </div>
    </div>
  );
};

export default CategoryPage;
